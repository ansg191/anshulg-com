---
interface Props {
  key?: string;
  keyLink?: string;
  valueLink?: string;

  level?: number;
  keylen?: number;
}

const { key, keyLink, valueLink, level = 1, keylen } = Astro.props;

const keyPadding = key && keylen ? keylen - key.length : 0;
if (keyPadding < 0 || keyPadding > 10) {
  throw new Error("Key length must be between 0 and 10");
}
const keyPaddingClass = `pl-[${keyPadding}ch]`;

const levelVariants = {
  0: "",
  1: "ml-4",
  2: "ml-8",
  3: "ml-12",
} as Record<number, string>;
if (level < 0 || level > 3) {
  throw new Error("Level must be between 0 and 3");
}
const indent = levelVariants[level];
---

<p class:list={["m-4", indent]}>
  {
    keyLink ? (
      <a
        href={keyLink}
        target="_blank"
        rel="noopener noreferrer"
        class="relative inline-block"
      >
        <span class="key">{key}</span>
        <slot name="key-extra" />
      </a>
    ) : (
      <>
        <span class="key">{key}</span>
        <slot name="key-extra" />
      </>
    )
  }
  <span class:list={[keyPaddingClass]}>&mdash;</span>
  {
    valueLink ? (
      <a href={valueLink} target="_blank" rel="noopener noreferrer">
        <slot />
      </a>
    ) : (
      <slot />
    )
  }
</p>

<style>
  .key {
    background-color: var(--color-gray-200);
    padding: calc(var(--spacing) * 1); /* p-1 */
    border-radius: var(--radius-sm); /* rounded-sm */
  }

  /* Dark mode styles */
  @media (prefers-color-scheme: dark) {
    .key {
      background-color: var(--color-gray-700);
    }
  }
</style>
